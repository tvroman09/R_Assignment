---
title: "R Assignment"
format: html
editor: visual
---

## Taylor Vroman

## R Assignment

This code reads in the files

```{r}
library(dplyr)
library(tidyverse)
setwd("C:/Users/18153/Downloads")
#read in files as data frames
fang <- read.table('fang_et_al_genotypes.txt', header = T)
#fill = TRUE for empty cells
snp <- read.table('snp_position.txt', header=T, fill=T)
```

**Data Inspection**

The following data inspection tells us the following pieces of information:

*Fang*

-   File size: 22681376 bytes

-   Dimension: 2782x986

-   Class: data frame

*SNP*

-   File size: 525582 bytes

-   Dimension: 1017x15

-   Class: data frame

```{r}
dim(fang)
dim(snp)
head(fang)
head(snp)
class(fang)
class(snp)
str(fang)
class(snp)
object.size(fang)
object.size(snp)
```

**Data Processing**

This code creates a column for each identified group of interest, called Category, labeling Maize or Teosinte

```{r}
fang_grouped <- fang %>% mutate(Category=
                                  case_when(Group == "ZMMIL" ~ "Maize",
                                            Group == "ZMMLR" ~ "Maize",
                                            Group == "ZMMMR" ~ "Maize",
                                            Group == "ZMPBA" ~ "Teosinte",
                                            Group == "ZMPIL" ~ "Teosinte",
                                            Group == "ZMPJA" ~ "Teosinte")
                                )
```

This code transposes a file and moves the rownames to its own column, while joining the two files together and keeping the data aligned.

```{r}
fang_grouped <- fang_grouped %>%
  filter(Category =="Maize" | Category == "Teosinte")
transposef <-t(fang_grouped)
#separate group titles
fang_titles <- transposef[c(1,2,3,987),] %>% as.data.frame()
#identify data
fang_numbers <- transposef[-c(1,2,3,987),] %>% as.data.frame()
fang_numbers$SNP_ID <- rownames(fang_numbers)
#merge numbers by SNP_ID
f_numbers_snp <- dplyr::inner_join(snp, fang_numbers, by = "SNP_ID")
#bind with group titles/identifiers
all_data <- bind_rows(fang_titles, f_numbers_snp)  %>%  t() %>% as.data.frame()
```

This code creates data frames for Chromosome, Position, and Category data.

```{r}
maize1_snp <- all_data %>%
  dplyr::filter(Category == "Maize") %>%
  rbind(all_data[c("Chromosome", "Position"),]) %>%
  t() %>%
  as.data.frame()

teo1_snp <- all_data %>%
  dplyr::filter(Category == "Teosinte") %>%
  rbind(all_data[c("Chromosome", "Position"),]) %>%
  t() %>%
  as.data.frame()
```

This code filters the data to create 40 files, two per each maize and teosinte group. 10 files per group are organized by increasing SNP, and 10 files per group are organized by decreasing SNP.

```{r}
chromosome_files <- function(df, group_name, chromosome) {
  df_inc <- df %>%
    filter (Chromosome == chromosome) %>%
    arrange (Position) %>%
    mutate(across(everything(), ~ifelse(is.na(.), "?", .)))
  write.csv(df_inc, sprintf("%s_chr%s_inc.csv", group_name, chromosome), row.names = FALSE, quote = FALSE)
    df_dec <- df %>%
      filter (Chromosome == chromosome) %>%
      arrange(desc(Position)) %>%
      mutate(across(everything(), ~ifelse(is.na(.), "-", .)))
    write.csv(df_dec, sprintf("%s_chr%s_dec.csv", group_name, chromosome), row.names = FALSE, quote = FALSE)
    
  }
group <- list(maize = maize1_snp, teosinte = teo1_snp)
lapply(names(group), function(group_name) {
  chromosomes <- unique(group[[group_name]]$Chromosome)
  lapply(chromosomes, function(chromosome) {
    chromosome_files(group[[group_name]], group_name, chromosome)
    })
})
```

**Data Visualization**

This code shows SNP count by Chromosome

```{r}
library(ggplot2)
plot_data <-all_data %>%
  t() %>%
  as.data.frame() %>%
  mutate(numeric_data = as.numeric(as.character(Position)))
plot_data %>%
  count(Chromosome) %>%
  ggplot(aes(x=Chromosome, y = n)) +
  geom_bar(stat="identity", position = position_dodge(), fill = "purple")+
  labs(title = "SNP by Chromosome", c = "Chromome", y = "SNP Count")
```

This code creates two plots, one with Maize SNP Count and one with Teosinte SNP Count - appears to be the same.

```{r}
#SNP by maize and teo group

maize1_snp %>%
  count(Chromosome) %>%
  ggplot(aes(x=Chromosome, y = n)) +
  geom_bar(stat="identity", position = position_dodge(), fill = "yellow")+
  labs(title = "Maize SNP Count", c = "Chromome", y = "SNP Count")

teo1_snp %>%
  count(Chromosome) %>%
  ggplot(aes(x=Chromosome, y = n)) +
  geom_bar(stat="identity", position = position_dodge(), fill = "green")+
  labs(title = "Teosinte SNP Count", c = "Chromome", y = "SNP Count")
```

This code creates a normalized plot of Homozygous, Heterozygous, and Missing Data

```{r}
all_data_pivot <- all_data %>%
  pivot_longer(cols = starts_with("..."), names_to = "SNP", values_to = "Genotype") %>%
  mutate(Homo = case_when(
    Genotype %in% c("A/A", "C/C", "G/G", "T/T") ~ "Homo",
    Genotype %in% c("?/A", "?/C", "?/G", "?/T", "A/?","C/?","G/?", "T/?","?/?") ~ "Missing",
    TRUE ~ "Hetero"
     )) %>%
    group_by(Homo) %>%
      summarize(Count=n(), .groups = "drop")
    head(all_data_pivot)
    all_data_pivot %>%
      ggplot(aes(x=Homo, y=Count, fill = Homo, position)) +
      geom_bar(stat="identity", fill='red', position = position_dodge2())+
      labs(title="Homozygous, Heterozygous, Missing Data",
           x="Group", y="Value")
    
#also show homo/hetero/missing by sample    
sample_long <- all_data %>%
  pivot_longer(cols = starts_with("..."), names_to = "SNP", values_to = "Genotype") %>%
  mutate(Homo = case_when(
    Genotype %in% c("A/A", "C/C", "G/G", "T/T") ~ "Homo",
    Genotype %in% c("?/A", "?/C", "?/G", "?/T", "A/?","C/?","G/?", "T/?","?/?") ~ "Missing",
    TRUE ~ "Hetero"
  ))
sample_long %>%
  group_by(Sample_ID, Homo) %>%
  summarise(Count = n(), .groups = "drop")%>%
  ggplot(aes(x = Sample_ID, y = Count, fill = Homo)) +  
  geom_bar(stat = "identity", position = "fill") +  
  labs(title = "Proportion of Homozygous, Heterozygous, and Missing Data by sample",
       x = "sample", y = "Proportion") +
    theme(axis.text.x = NULL) 
     
```

This code looks at the plot of count per specific group previously analyzed

```{r}
all_data %>% group_by(Group) %>%
  summarize(count=length(Group)) %>%
  ggplot(aes(x=Group, y=count)) +
  geom_bar(stat="identity", position = position_dodge(), fill = "pink")+
  labs(title = "Group Identity", c = "Group", y = "Count")
```
